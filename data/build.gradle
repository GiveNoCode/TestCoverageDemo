apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

jacoco {
    toolVersion = jacoco_version
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':domain')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "com.squareup.okhttp3:okhttp:4.8.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.8.1"

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'Verification'

    final fileFilter = [
            '**/R.class', '**/R$*.class',
            '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
            'android/**/*.*'
    ]
    final kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    final javacTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    final mainSrc = "${projectDir}/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([kotlinTree, javacTree])
    executionData.setFrom fileTree(dir: buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])

    reports {
        html {
            enabled = true
            destination file("${buildDir}/reports/jacoco/html")
        }
    }
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'testDebugUnitTest') {
    group = 'Verification'
    sourceDirectories.setFrom jacocoTestReport.sourceDirectories
    classDirectories.setFrom jacocoTestReport.classDirectories
    executionData.setFrom jacocoTestReport.executionData

    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification